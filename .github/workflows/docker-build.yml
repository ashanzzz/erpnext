name: 构建并推送Docker镜像

on:
  # 每月1号凌晨运行
  schedule:
    - cron: '0 0 1 * *'
  # 手动触发（右上角 Run Workflow）
  workflow_dispatch:
  # 当推送到 main 分支，并且修改了下列文件时触发
  push:
    branches: [ main ]
    paths:
      - 'apps.json'
      - '.github/workflows/docker-build.yml'
      - 'Dockerfile'  # 如无实际用处，可去掉

jobs:
  build:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write  # 允许将镜像推送到 GitHub Packages (ghcr.io)

    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 生成 APPS_JSON_BASE64
        run: |
          echo "APPS_JSON_BASE64=$(base64 -w 0 apps.json)" >> $GITHUB_ENV
          # 如果是 macOS 环境，可用：
          # echo "APPS_JSON_BASE64=$(base64 apps.json | tr -d '\n')" >> $GITHUB_ENV

      - name: 克隆 frappe_docker
        run: |
          git clone https://github.com/frappe/frappe_docker

      - name: 设置 Buildx (用于多架构或更好的缓存)
        uses: docker/setup-buildx-action@v2

      - name: 登录 GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 构建和推送镜像
        uses: docker/build-push-action@v3
        with:
          # 以克隆下来的 frappe_docker 目录为上下文
          context: frappe_docker
          # 使用 frappe_docker/images/layered/Containerfile (快速构建)
          file: frappe_docker/images/layered/Containerfile
          # 构建完立即推送
          push: true
          # 只构建 amd64，若需要多架构可以改为 "linux/amd64,linux/arm64" 等
          platforms: linux/amd64
          # 传递必要的 Build Args
          build-args: |
            FRAPPE_PATH=https://github.com/frappe/frappe
            FRAPPE_BRANCH=version-15
            APPS_JSON_BASE64=${{ env.APPS_JSON_BASE64 }}
          # 推送到 ghcr.io，使用两个标签示例：latest 和 version-15
          tags: |
            ghcr.io/${{ github.repository_owner }}/erpnext:latest
            ghcr.io/${{ github.repository_owner }}/erpnext:version-15
