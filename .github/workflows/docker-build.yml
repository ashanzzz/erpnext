name: 构建并推送Docker镜像

on:
  # 定时触发：每月1号凌晨执行
  schedule:
    - cron: '0 0 1 * *'

  # 手动触发：GitHub Actions 页面 -> Run workflow
  workflow_dispatch:

  # 推送触发：当 main 分支的特定文件发生更改时触发
  push:
    branches:
      - main
    paths:
      - 'apps.json'
      - '.github/workflows/docker-build.yml'
      - 'Dockerfile'

jobs:
  ######################################################################
  # 1) prepare Job
  #    - 检出代码，获取 VERSION & APPS_JSON_BASE64
  #    - 克隆 frappe_docker 并上传为 artifact
  ######################################################################
  prepare:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Step 1: 检出代码
        uses: actions/checkout@v3

      - name: Step 2: 获取版本号
        run: |
          if [ -f "apps.json" ]; then
            export VERSION=$(jq -r '.[0].branch' apps.json | sed 's/version-//')
          else
            export VERSION=$(git describe --tags --always)
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "最新版本号为: $VERSION"

      - name: Step 3: 生成 APPS_JSON_BASE64
        run: |
          export APPS_JSON_BASE64=$(base64 -w 0 apps.json)
          echo "APPS_JSON_BASE64=$APPS_JSON_BASE64" >> $GITHUB_ENV
          echo "APPS_JSON_BASE64 生成完毕."

      - name: Step 4: 克隆 frappe_docker
        run: |
          echo "开始克隆 frappe_docker 仓库..."
          git clone https://github.com/frappe/frappe_docker
          ls -al frappe_docker

      - name: Step 5: 打包 frappe_docker 并上传 Artifact
        run: |
          zip -r frappe_docker.zip frappe_docker
          ls -lh frappe_docker.zip
        # 将打包后的 zip 文件上传为 artifact
      - name: Upload frappe_docker artifact
        uses: actions/upload-artifact@v3
        with:
          name: frappe_docker_artifact
          path: frappe_docker.zip

  ######################################################################
  # 2) build_image Job
  #    - 下载 artifact 并解压得到 frappe_docker 目录
  #    - 使用 docker/build-push-action 构建镜像（不推送）
  ######################################################################
  build_image:
    runs-on: ubuntu-latest
    needs: prepare

    steps:
      - name: Step 1: 检出代码 (获取 env.VERSION / env.APPS_JSON_BASE64)
        uses: actions/checkout@v3

      - name: Step 2: 下载 frappe_docker artifact
        uses: actions/download-artifact@v3
        with:
          name: frappe_docker_artifact

      - name: Step 3: 解压 frappe_docker
        run: |
          unzip frappe_docker.zip
          ls -al

      - name: Step 4: 构建镜像 (不推送)
        uses: docker/build-push-action@v3
        with:
          context: frappe_docker
          file: frappe_docker/images/layered/Containerfile
          push: false          # 不推送
          platforms: linux/amd64
          build-args: |
            FRAPPE_PATH=https://github.com/frappe/frappe
            FRAPPE_BRANCH=version-${{ env.VERSION }}
            APPS_JSON_BASE64=${{ env.APPS_JSON_BASE64 }}
          tags: |
            ghcr.io/${{ github.repository_owner }}/erpnext:latest
            ghcr.io/${{ github.repository_owner }}/erpnext:version-${{ env.VERSION }}
        env:
          DOCKER_BUILDKIT: 1
          BUILDKIT_PROGRESS: plain

  ######################################################################
  # 3) push_to_github_registry Job
  #    - 登录 GitHub Container Registry
  #    - 推送镜像
  ######################################################################
  push_to_github_registry:
    runs-on: ubuntu-latest
    needs: build_image

    steps:
      - name: Step 1: 登录 GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Step 2: 推送镜像到 GitHub Container Registry
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/erpnext:latest
          docker push ghcr.io/${{ github.repository_owner }}/erpnext:version-${{ env.VERSION }}

  ######################################################################
  # 4) push_to_dockerhub Job
  #    - 登录 Docker Hub
  #    - 将镜像打上 Docker Hub tag 并推送
  ######################################################################
  push_to_dockerhub:
    runs-on: ubuntu-latest
    needs: build_image

    steps:
      - name: Step 1: 登录 Docker Hub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Step 2: 推送镜像到 Docker Hub
        run: |
          docker tag ghcr.io/${{ github.repository_owner }}/erpnext:version-${{ env.VERSION }} \
          ${{ secrets.DOCKER_USERNAME }}/erpnext-hrms-payments:version-${{ env.VERSION }}

          docker push ${{ secrets.DOCKER_USERNAME }}/erpnext-hrms-payments:version-${{ env.VERSION }}
