name: 构建并推送Docker镜像

on:
  schedule:
    - cron: '0 0 1 * *'  # 每月1号凌晨执行
  workflow_dispatch:  # 手动触发
  push:
    branches:
      - main
    paths:
      - 'apps.json'
      - '.github/workflows/docker-build.yml'
      - 'Dockerfile'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # Step 1: 检出代码
      - name: 检出代码
        uses: actions/checkout@v3

      # Step 2: 获取版本号
      - name: 获取最新版本号
        run: |
          if [ -f "apps.json" ]; then
            export VERSION=$(jq -r '.[0].branch' apps.json | sed 's/version-//')
          else
            export VERSION=$(git describe --tags --always)
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "最新版本号为: $VERSION"

      # Step 3: 生成 APPS_JSON_BASE64
      - name: 生成 APPS_JSON_BASE64
        run: |
          export APPS_JSON_BASE64=$(base64 -w 0 apps.json)
          echo "APPS_JSON_BASE64=$APPS_JSON_BASE64" >> $GITHUB_ENV

      # Step 4: 克隆 frappe_docker
      - name: 克隆 frappe_docker
        run: git clone https://github.com/frappe/frappe_docker

      # Step 5: 设置 Buildx
      - name: 设置 Buildx
        uses: docker/setup-buildx-action@v2

  # 仅构建镜像
  build_image:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      # Step 6: 构建镜像
      - name: 构建镜像
        uses: docker/build-push-action@v3
        with:
          context: frappe_docker
          file: frappe_docker/images/layered/Containerfile
          push: false  # 不推送
          platforms: linux/amd64
          build-args: |
            FRAPPE_PATH=https://github.com/frappe/frappe
            FRAPPE_BRANCH=version-${{ env.VERSION }}
            APPS_JSON_BASE64=${{ env.APPS_JSON_BASE64 }}
          tags: |
            ghcr.io/${
